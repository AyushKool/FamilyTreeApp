{"version":3,"sources":["Single.js","Couple.js","App.js","serviceWorker.js","index.js"],"names":["Couple","props","state","name","gender","handleClick","bind","e","preventDefault","prompt","toUpperCase","substring","toLowerCase","this","setState","alert","onClick","className","React","Component","children","Children","forEach","child","push","husband","wife","mode","type","prevState","length","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5ca9e30d.chunk.js","sourcesContent":["import React from \"react\";\r\n// import SingleModal from \"./Modals/SingleModal\";\r\n\r\nexport default class Couple extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      name: this.props.name,\r\n      gender: this.props.gender,\r\n    };\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  handleClick(e) {\r\n    e.preventDefault();\r\n\r\n    var name = prompt(\"Enter new name: \");\r\n    if (name === null || name === '') return\r\n    name = name[0].toUpperCase() + name.substring(1).toLowerCase();\r\n    var gender = prompt(\"Enter new gender: (male/female)\");\r\n    if (gender === null || gender === '') return\r\n    gender = gender.toLowerCase()\r\n    if (gender !== 'male' && gender !== 'female'){alert('Invalid Input');return;}\r\n\r\n    this.setState({name: name, gender : gender});\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <li>\r\n          <div onClick={this.handleClick}>\r\n            <span className={this.state.gender}>{this.state.name}</span>\r\n          </div>\r\n        </li>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport './index.css'\r\nimport Single from \"./Single\";\r\n\r\nexport default class Couple extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    var children = [];\r\n    React.Children.forEach(this.props.children, (child) => {\r\n      children.push(child);\r\n    });\r\n    this.state = {\r\n      husband: this.props.husband,\r\n      wife: this.props.wife,\r\n      children: children,\r\n    };\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  handleClick(e) {\r\n    e.preventDefault();\r\n    var mode = prompt(\"Do you want to edit or add? (edit/add): \");\r\n    if (mode === null) return;\r\n    else mode = mode.toLowerCase();\r\n\r\n    if (mode === \"add\") {\r\n      var children = this.state.children;\r\n      var type = prompt(\"Enter type of child (single/couple): \");\r\n      if (type === null || type === \"\") return;\r\n      type = type.toLowerCase();\r\n      if (type === \"single\") {\r\n        var name = prompt(\"Enter new name: \");\r\n        if (name === null || name === \"\") return;\r\n        name = name[0].toUpperCase() + name.substring(1).toLowerCase();\r\n        var gender = prompt(\"Enter new gender: (male/female)\");\r\n        if (gender === null || gender === \"\") return;\r\n        gender = gender.toLowerCase();\r\n        if (gender !== \"male\" && gender !== \"female\") {\r\n          alert(\"Invalid Input\");\r\n          return;\r\n        }\r\n        children.push(<Single name={name} gender={gender} />);\r\n      } else if (type === \"couple\") {\r\n        var husband = prompt(\"Enter new husband's name: \");\r\n        if (husband === null || husband === \"\") return;\r\n        husband = husband[0].toUpperCase() + husband.substring(1).toLowerCase();\r\n\r\n        var wife = prompt(\"Enter new wife's name: \");\r\n        if (wife === null || wife === \"\") return;\r\n        wife = wife[0].toUpperCase() + wife.substring(1).toLowerCase();\r\n\r\n        children.push(<Couple husband={husband} wife={wife}></Couple>);\r\n      } else {\r\n        alert(\"Invalid Input\");\r\n        return;\r\n      }\r\n      this.setState((prevState) => {\r\n        return {\r\n          husband: prevState.husband ,\r\n          wife: prevState.wife ,\r\n          children: children\r\n        };\r\n      });\r\n    } else if (mode === \"edit\") {\r\n      husband = prompt(\"Enter new husband's name: \");\r\n      if (husband === null || husband === \"\") return;\r\n      husband = husband[0].toUpperCase() + husband.substring(1).toLowerCase();\r\n\r\n      wife = prompt(\"Enter new wife's name: \");\r\n      if (wife === null || wife === \"\") return;\r\n      wife = wife[0].toUpperCase() + wife.substring(1).toLowerCase();\r\n      this.setState((prevState) => {\r\n        return { husband: husband, wife: wife, children: prevState.children };\r\n      });\r\n    } else alert(\"Invalid Input\");\r\n  }\r\n\r\n  render() {\r\n    const children = this.state.children;\r\n    return (\r\n      <li>\r\n        <div onClick={this.handleClick}>\r\n          <span className=\"male\">{this.state.husband}</span>\r\n          <span className=\"spacer\"></span>\r\n          <span className=\"female\">{this.state.wife}</span>\r\n        </div>\r\n      {children != null && children.length !== 0 ? <ul>{this.state.children}</ul> : \"\"}\r\n      </li>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport Couple from \"./Couple\";\r\n\r\n\r\n\r\nexport default class App extends React.Component {\r\n  //2:46:00 freeCodeCamp video\r\n  // State vs Props: https://lucybain.com/blog/2016/react-state-vs-pros/\r\n  // Deploy and Commit: https://www.geeksforgeeks.org/how-to-deploy-your-react-websites-on-github/\r\n\r\n  \r\n  // \"homepage\": \"https://ayushkool.github.io/FamilyTreeApp/\",\r\n  // \"homepage\": \".\",\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <ul>\r\n          <Couple husband=\"Father\" wife=\"Mother\"></Couple>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}