{"version":3,"sources":["Couple.js","Single.js","App.js","serviceWorker.js","index.js"],"names":["Couple","props","state","husband","wife","handleClick","bind","newState","this","modal","document","getElementById","style","display","onClick","event","preventDefault","value","setState","children","className","length","React","Component","name","gender","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kNAEqBA,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,QAAS,EAAKF,MAAME,QACpBC,KAAM,EAAKH,MAAMG,MAEnB,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBANF,E,0DAUjB,IAAMC,EAAWC,KAAKN,MAChBO,EAAQC,SAASC,eAAe,eACtCF,EAAMG,MAAMC,QAAU,QACJH,SAASC,eAAe,mBAChCG,QAAU,SAACC,GACnBA,EAAMC,iBACNP,EAAMG,MAAMC,QAAU,OACtBN,EAASJ,QAAUO,SAASC,eAAe,SAASM,MACpDV,EAASH,KAAOM,SAASC,eAAe,SAASM,OAEnDT,KAAKU,SAASX,K,+BAId,IAAMY,EAAWX,KAAKP,MAAMkB,SAC5B,OACE,4BACE,yBAAKL,QAASN,KAAKH,aACjB,0BAAMe,UAAU,QAAQZ,KAAKN,MAAMC,SACnC,0BAAMiB,UAAU,WAChB,0BAAMA,UAAU,UAAUZ,KAAKN,MAAME,OAE1B,MAAZe,GAAwC,IAApBA,EAASE,OAAe,4BAAKF,GAAiB,Q,GAjCvCG,IAAMC,WCArBvB,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXsB,KAAM,EAAKvB,MAAMuB,KACjBC,OAAQ,EAAKxB,MAAMwB,QAErB,EAAKpB,YAAc,EAAKA,YAAYC,KAAjB,gBANF,E,0DAUjB,IAAMC,EAAWC,KAAKN,MAChBO,EAAQC,SAASC,eAAe,eACtCF,EAAMG,MAAMC,QAAU,QACJH,SAASC,eAAe,mBAChCG,QAAU,SAACC,GACnBA,EAAMC,iBACNP,EAAMG,MAAMC,QAAU,OACtBN,EAASJ,QAAUO,SAASC,eAAe,QAAQM,MACnDV,EAASH,KAAOM,SAASC,eAAe,UAAUM,OAEpDT,KAAKU,SAASX,K,+BAId,OACE,4BACE,yBAAKO,QAASN,KAAKH,aACjB,0BAAMe,UAAWZ,KAAKN,MAAMuB,QAASjB,KAAKN,MAAMsB,Y,GA5BtBF,IAAMC,WCIrBG,E,uKAKjB,OACE,yBAAKN,UAAU,OACb,4BACE,kBAAC,EAAD,CAAQI,KAAK,QAAQC,OAAO,SAC5B,kBAAC,EAAD,CAAQtB,QAAQ,OAAOC,KAAK,QAC1B,kBAAC,EAAD,CAAQoB,KAAK,QAAQC,OAAO,kB,GAVPH,IAAMC,WCMnBI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFxB,SAASC,eAAe,SDyHpB,kBAAmBwB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.02849eb2.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default class Couple extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      husband: this.props.husband,\r\n      wife: this.props.wife,\r\n    };\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  handleClick() {\r\n    const newState = this.state\r\n    const modal = document.getElementById('coupleModal');\r\n    modal.style.display = 'block';\r\n    const submitbtn = document.getElementById('couplesubmitbtn');\r\n    submitbtn.onClick = (event) => {\r\n      event.preventDefault()\r\n      modal.style.display = 'none'\r\n      newState.husband = document.getElementById('hname').value;\r\n      newState.wife = document.getElementById('wname').value;\r\n    }\r\n    this.setState(newState);\r\n  }\r\n\r\n  render() {\r\n    const children = this.props.children;\r\n    return (\r\n      <li>\r\n        <div onClick={this.handleClick}>\r\n          <span className=\"male\">{this.state.husband}</span>\r\n          <span className=\"spacer\"></span>\r\n          <span className=\"female\">{this.state.wife}</span>\r\n        </div>\r\n        {children != null && children.length !== 0 ? <ul>{children}</ul> : \"\"}\r\n      </li>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nexport default class Couple extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      name: this.props.name,\r\n      gender: this.props.gender,\r\n    };\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  handleClick() {\r\n    const newState = this.state\r\n    const modal = document.getElementById('singleModal');\r\n    modal.style.display = 'block';\r\n    const submitbtn = document.getElementById('singlesubmitbtn');\r\n    submitbtn.onClick = (event) => {\r\n      event.preventDefault()\r\n      modal.style.display = 'none'\r\n      newState.husband = document.getElementById('name').value;\r\n      newState.wife = document.getElementById('gender').value;\r\n    }\r\n    this.setState(newState);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <li>\r\n        <div onClick={this.handleClick}>\r\n          <span className={this.state.gender}>{this.state.name}</span>\r\n        </div>\r\n      </li>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport Couple from \"./Couple\";\r\nimport Single from \"./Single\";\r\n\r\n\r\n\r\nexport default class App extends React.Component {\r\n  //2:46:00 freeCodeCamp video\r\n  // State vs Props: https://lucybain.com/blog/2016/react-state-vs-pros/\r\n  // Deploy and Commit: https://www.geeksforgeeks.org/how-to-deploy-your-react-websites-on-github/\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <ul>\r\n          <Single name=\"Luffy\" gender=\"male\" />\r\n          <Couple husband=\"Zoro\" wife=\"Nami\">\r\n            <Single name=\"Robin\" gender=\"female\" />\r\n          </Couple>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}